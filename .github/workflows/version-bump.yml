name: Version Bump

on:
  workflow_dispatch:
    inputs:
      bump_type:
        description: 'Version bump type (major/minor/patch)'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major
      package_name:
        description: 'Package to bump version for'
        required: true
        type: choice
        options:
          - dmf-ai-docgen
          - dmf-bundlers
          - dmf-core
          - dmf-logging
          - dmf-oidc
          - dmf-react
          - dmf-ros

jobs:
  bump-version:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Setup Git
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
      
      - name: Bump Version
        run: |
          cd packages/${{ github.event.inputs.package_name }}
          npm version ${{ github.event.inputs.bump_type }} -m "Bump ${{ github.event.inputs.package_name }} version to %s"
      
      - name: Push Changes
        run: |
          git push
          git push --tags

      # Setup Node.js and pnpm
      - uses: actions/setup-node@v3
        with:
          node-version: 21
          registry-url: 'https://registry.npmjs.org'
      - uses: pnpm/action-setup@v3
        with:
          version: 9
      
      # Install dependencies and build
      - name: Install NX CLI
        run: pnpm add -g nx
      - name: Install dependencies
        run: pnpm install
      - name: Build package
        run: pnpm nx build ${{ github.event.inputs.package_name }}

      # Publishing steps
      - name: Configure publishing
        run: |
          echo "//registry.npmjs.org/:_authToken=${NODE_AUTH_TOKEN}" > .npmrc
          echo "auto-install-peers=true" >> .npmrc
          echo "strict-peer-dependencies=false" >> .npmrc
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NODE_AUTH_TOKEN }}
      
      # Check if version exists
      - name: Check if version exists
        id: version_check
        run: |
          PKG_VERSION=$(node -p "require('./package.json').version")
          if npm view "@dream.mf/${{ github.event.inputs.package_name }}@$PKG_VERSION" version &> /dev/null; then
            echo "Version $PKG_VERSION already exists, skipping publish"
            echo "exists=true" >> $GITHUB_OUTPUT
          else
            echo "Version $PKG_VERSION does not exist, proceeding with publish"
            echo "exists=false" >> $GITHUB_OUTPUT
          fi
        working-directory: packages/${{ github.event.inputs.package_name }}
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NODE_AUTH_TOKEN }}
      
      # Use pnpm publish directly with workspace protocol handling
      - name: Publish package
        if: steps.version_check.outputs.exists != 'true'
        run: pnpm publish --access public --no-git-checks
        working-directory: packages/${{ github.event.inputs.package_name }}
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NODE_AUTH_TOKEN }}
